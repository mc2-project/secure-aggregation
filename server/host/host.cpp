#include <openenclave/host.h>
#include <stdio.h>

#include "../enclave.h"

// Include the untrusted modelaggregator header that is generated
// during the build. This file is generated by calling the
// sdk tool oeedger8r against the modelaggregator.edl file.
#include "modelaggregator_u.h"

char* path;
uint32_t flags;

bool check_simulate_opt(int* argc, const char* argv[])
{
    for (int i = 0; i < *argc; i++)
    {
        if (strcmp(argv[i], "--simulate") == 0)
        {
            fprintf(stdout, "Running in simulation mode\n");
            memmove(&argv[i], &argv[i + 1], (*argc - i) * sizeof(char*));
            (*argc)--;
            return true;
        }
    }
    return false;
}

// This is the function that the Python code will call into
// Returns NULL on failure, new encrypted model on success
unsigned char** host_modelaggregator(unsigned char*** encrypted_accumulator, 
        uint32_t* decrypted_accumulator_lengths,
        size_t length, 
        unsigned char** encrypted_old_params,
        uint32_t decrypted_old_params_length)
{
    oe_result_t error;
    // Create the enclave
    Enclave enclave(path, flags);
    error = enclave.getEnclaveRet();
    if (error != OE_OK)
    {
        fprintf(
            stderr,
            "oe_create_modelaggregator_enclave(): result=%u (%s)\n",
            error,
            oe_result_str(error));
        return NULL;
    }

    unsigned char** encrypted_new_params = (unsigned char**) malloc(sizeof(unsigned char*));
    error = enclave_modelaggregator(enclave.getEnclave(), 
            encrypted_accumulator, 
            decrypted_accumulator_lengths, 
            length, 
            encrypted_old_params, 
            decrypted_old_params_length, 
            &encrypted_new_params);
    if (error != OE_OK)
    {
        fprintf(
            stderr,
            "calling into enclave_modelaggregator failed: result=%u (%s)\n",
            error,
            oe_result_str(error));
        return NULL;
    }

    return encrypted_new_params;
}

int main(int argc, const char* argv[])
{
    if (argc <= 1)
    {
        fprintf(
            stderr, "Usage: %s enclave_image_path [ --simulate  ]\n", argv[0]);
        return 1;
    }

    path = (char*) argv[1];
    flags = OE_ENCLAVE_FLAG_DEBUG;
    if (check_simulate_opt(&argc, argv))
    {
        flags |= OE_ENCLAVE_FLAG_SIMULATE;
    }

    return 0;
}

