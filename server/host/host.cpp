// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

#include <openenclave/host.h>
#include <stdio.h>

// Include the untrusted modelaggregator header that is generated
// during the build. This file is generated by calling the
// sdk tool oeedger8r against the modelaggregator.edl file.
#include "modelaggregator_u.h"

bool check_simulate_opt(int* argc, const char* argv[])
{
    for (int i = 0; i < *argc; i++)
    {
        if (strcmp(argv[i], "--simulate") == 0)
        {
            fprintf(stdout, "Running in simulation mode\n");
            memmove(&argv[i], &argv[i + 1], (*argc - i) * sizeof(char*));
            (*argc)--;
            return true;
        }
    }
    return false;
}

// This is the function that the Python code will call into
// Returns NULL on failure, new encrypted model on success
char* host_modelaggregator(char** encrypted_accumulator, size_t length, char* encrypted_old_params)
{
    oe_result_t result;
    int error = 1;
    oe_enclave_t* enclave = NULL;

    uint32_t flags = OE_ENCLAVE_FLAG_DEBUG;
    if (check_simulate_opt(&argc, argv))
    {
        flags |= OE_ENCLAVE_FLAG_SIMULATE;
    }

    if (argc != 2)
    {
        fprintf(
            stderr, "Usage: %s enclave_image_path [ --simulate  ]\n", argv[0]);
        goto exit;
    }

    // Create the enclave
    result = oe_create_modelaggregator_enclave(
        argv[1], OE_ENCLAVE_TYPE_AUTO, flags, NULL, 0, &enclave);
    if (result != OE_OK)
    {
        fprintf(
            stderr,
            "oe_create_modelaggregator_enclave(): result=%u (%s)\n",
            result,
            oe_result_str(result));
        goto exit;
    }

    char** encrypted_new_params_ptr = (char**) malloc(sizeof(char*));
    result = enclave_modelaggregator(enclave, encrypted_accumulator, length, encrypted_old_params, encrypted_new_params_ptr);
    if (result != OE_OK)
    {
        fprintf(
            stderr,
            "calling into enclave_modelaggregator failed: result=%u (%s)\n",
            result,
            oe_result_str(result));
        goto exit;
    }

    error = 0;
  exit:
      // Clean up the enclave if we created one
      if (enclave)
          oe_terminate_enclave(enclave);
      return error ? NULL : *encrypted_new_params;
}

