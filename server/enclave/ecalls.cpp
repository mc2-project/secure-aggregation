// Include the trusted modelaggregator header that is generated
// during the build. This file is generated by calling the
// sdk tool oeedger8r against the modelaggregator.edl file.
#include "modelaggregator_t.h"

#include <stdio.h>
#include <vector>
#include <numeric>
#include <map>
#include <set>
#include <string>
#include <iostream>

// Include encryption/decryption and serialization/deserialization headers
#include "encryption/encrypt.h"
#include "encryption/serialization.h"
#include "utils.h"

using namespace std;

#define check_host_buffer(ptr, size) {                    \
if (!oe_is_outside_enclave((ptr), size)) {                \
    fprintf(stderr,                                       \
            "%s:%d: Buffer bounds check failed\n",        \
            __FILE__, __LINE__);                          \
    exit(1);                                              \
}                                                         \
}

// Defined in modelaggregator.conf
static const int MAX_TCS = 32;

// Ciphertext, IV, and tag are required for decryption
static const size_t ENCRYPTION_METADATA_LENGTH = 3;

// Global variables stored for threading
vector<map<string, vector<float>>> g_accumulator;
vector<string> g_vars_to_aggregate;
map<string, vector<float>> g_old_params;
vector<float> g_contributions;
int NUM_THREADS;

// Helper function used to copy double pointers from untrusted memory to enclave memory
void copy_arr_to_enclave(uint8_t* dst[], size_t num, uint8_t* src[], size_t lengths[]) {
  for (int i = 0; i < num; i++) {
    size_t nlen = lengths[i];
    check_host_buffer(src[i], nlen);
    dst[i] = new uint8_t[nlen];
    memcpy((void*) dst[i], (const void*) src[i], nlen);
  }
}

// Stores the unencrypted values needed for aggregation
void enclave_store_globals(uint8_t** encrypted_accumulator,
            size_t* accumulator_lengths,
            size_t accumulator_length,
            uint8_t* encrypted_old_params,
            size_t old_params_plus_enc_metadata_length,
            float* contributions) {
    set<string> vars;
    size_t old_params_length = old_params_plus_enc_metadata_length - CIPHER_IV_SIZE - CIPHER_TAG_SIZE;
    // This for loop decrypts the accumulator and adds all
    // variables received by the clients into a set.
    for (int i = 0; i < accumulator_length; i++) {
        // Copy over local model updates to enclave memory
        size_t buffer_size = accumulator_lengths[i] + CIPHER_IV_SIZE + CIPHER_TAG_SIZE;
        check_host_buffer(encrypted_accumulator[i], buffer_size);
        uint8_t* encrypted_accumulator_i_cpy = (uint8_t*) malloc(buffer_size * sizeof(uint8_t));
        memcpy(encrypted_accumulator_i_cpy, encrypted_accumulator[i], buffer_size);

        uint8_t* serialized_accumulator = (uint8_t*) malloc(accumulator_lengths[i] * sizeof(uint8_t));
        decrypt_bytes(encrypted_accumulator_i_cpy,
                encrypted_accumulator_i_cpy + accumulator_lengths[i],
                encrypted_accumulator_i_cpy + accumulator_lengths[i] + CIPHER_IV_SIZE,
                accumulator_lengths[i],
                &serialized_accumulator);

        map<string, vector<float>> acc_params = deserialize(serialized_accumulator);

        free(encrypted_accumulator_i_cpy);
        free(serialized_accumulator);

        for (const auto& pair : acc_params) {
            if (pair.first != "_contribution" && !(pair.first.rfind("shape", 0) == 0)) {
                vars.insert(pair.first);
            }
        }
        g_contributions.push_back(contributions[i]);
        g_accumulator.push_back(acc_params);
    }
    copy(vars.begin(), vars.end(), back_inserter(g_vars_to_aggregate));

    // Store decrypted old params
    size_t old_params_buffer_size = old_params_length + CIPHER_IV_SIZE + CIPHER_TAG_SIZE;
    // check_host_buffer(encrypted_old_params, old_params_buffer_size);
    uint8_t* encrypted_old_params_cpy = (uint8_t*) malloc(old_params_buffer_size * sizeof(uint8_t));
    memcpy(encrypted_old_params_cpy, encrypted_old_params, old_params_buffer_size);

    uint8_t* serialized_old_params = (uint8_t*) malloc(old_params_length * sizeof(uint8_t)); 
    decrypt_bytes(encrypted_old_params_cpy,
            encrypted_old_params_cpy + old_params_length,
            encrypted_old_params_cpy + old_params_length + CIPHER_IV_SIZE,
            old_params_length,
            &serialized_old_params);

    g_old_params = deserialize(serialized_old_params);

    free(encrypted_old_params_cpy);
    free(serialized_old_params);
}

// Validates the number of threads that the host is trying to create
bool enclave_set_num_threads(int num_threads) {
    // We can't run more threads than we have TCSs, and there can't be more threads than weights
    if (num_threads > MAX_TCS || num_threads > g_vars_to_aggregate.size()) {
        return false;
    }
    NUM_THREADS = num_threads;
    return true;
}

// This is the function that the host calls. It performs the aggregation and updates g_old_params.
void enclave_modelaggregator(int tid) {
    // Fast ceiling division of g_vars_to_aggregate.size() / NUM_THREADS
    int slice_length = 1 + ((g_vars_to_aggregate.size() - 1) / NUM_THREADS);

    // Pick on which variables to perform aggregation depending on thread ID
    auto first = g_vars_to_aggregate.begin() + tid * slice_length;
    auto last = g_vars_to_aggregate.begin() + min((int) g_vars_to_aggregate.size(), (tid + 1) * slice_length);
    vector<string> vars_slice(first, last);

    // Outer loop: iterate through each local model update
    for (int k = 0; k < g_accumulator.size(); k++) {
        map<string, vector<float>> acc_params = g_accumulator[k];

        // Inner loop: iterate through a subset of variable names, dependent on TID
        for (string v_name : vars_slice) {
            float iters_sum = 0;
            vector<float> updated_params_at_var(g_old_params[v_name]);

            if (acc_params.find(v_name) == acc_params.end()) { // This accumulator doesn't have the given variable
                continue;
            }

            // Each params map will have an additional key "_contribution" to hold the number of local iterations.
            float n_iter = g_contributions[k];
            iters_sum += n_iter;
            // Multiply the weights by local iterations.
            vector<float>& weights = acc_params[v_name];
            if (updated_params_at_var.size() != weights.size()) {
                std::cout << "Error! Unequal sizes" << std::endl;
            }

            for (int r = 0; r < weights.size(); r++) {
                updated_params_at_var[r] += weights[r] * n_iter;

                if (k == g_accumulator.size() - 1 && iters_sum > 0) { 
                    updated_params_at_var[r] /= iters_sum;
                }
            }
            g_old_params[v_name] = updated_params_at_var;
        }
    }
}

void enclave_transfer_model_out(uint8_t** encrypted_new_params_ptr, size_t* new_params_length) {
    // Prepare to copy results outside enclave
    int serialized_buffer_size = 0;
    uint8_t* serialized_new_params = serialize(g_old_params, &serialized_buffer_size);
    *encrypted_new_params_ptr = (uint8_t*) oe_host_malloc((serialized_buffer_size + CIPHER_IV_SIZE + CIPHER_TAG_SIZE));
    encrypt_bytes(serialized_new_params, serialized_buffer_size, encrypted_new_params_ptr);

    // Copy the encrypted model, IV, and tag over to untrusted memory.
    *new_params_length = serialized_buffer_size;

    // Free serialized plaintext buffer
    free(serialized_new_params);

    // Clear the global variables before the next round of training
    for (auto& params : g_accumulator) {
        for (auto& feature : params) {
            feature.second.clear();
            feature.second.shrink_to_fit();
        }
        params.clear();
    }
    g_accumulator.clear();
    g_vars_to_aggregate.clear();

    for (auto& feature : g_old_params) {
        feature.second.clear();
        feature.second.shrink_to_fit();
    }
    g_old_params.clear();
    g_contributions.clear();
}
